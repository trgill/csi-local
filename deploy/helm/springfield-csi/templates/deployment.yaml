apiVersion: v1
kind: Pod
metadata:
  name: springfield-csi-driver
  labels:
    app: springfield-csi-driver
spec:
  containers:
  - name: springfield-csi-driver
    image: ghcr.io/trgill/springfield-csi-driver:devel
    imagePullPolicy: Always
    securityContext:
      privileged: true
    env:
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
    ports:
    - containerPort: 9898
      name: healthz
      protocol: TCP
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthz
        port: healthz
      initialDelaySeconds: 10
      timeoutSeconds: 3
      periodSeconds: 2

    volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/dbus
        mountPropagation: Bidirectional
        name: dbus-socket
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: "Bidirectional"
        name: mountpoint-dir

  - name: liveness-probe
    volumeMounts:
    - mountPath: /csi
      name: socket-dir
    image: k8s.gcr.io/sig-storage/livenessprobe:v2.6.0
    args:
    - --csi-address=/csi/csi.sock
    - --health-port=9898

  - name: csi-provisioner
    image: k8s.gcr.io/sig-storage/csi-provisioner:v3.1.0
    args:
      - "--csi-address=/csi/csi.sock"
      - "--logtostderr"
      - "--leader-election"
      - "--http-endpoint=:8080"
      - "--leader-election-namespace=springfield-system"
    env:
      - name: ADDRESS
        value: /csi/csi.sock
    imagePullPolicy: "IfNotPresent"
    volumeMounts:
    - mountPath: /csi
      name: socket-dir
    ports:
      - containerPort: 9898
        name: http-endpoint
        protocol: TCP

  - name: csi-attacher
    volumeMounts:
    - mountPath: /csi
      name: socket-dir
    image: registry.k8s.io/sig-storage/csi-attacher:v3.5.0
    args:
      - --v=5
      - --csi-address=/csi/csi.sock
    securityContext:
      # This is necessary only for systems with SELinux, where
      # non-privileged sidecar containers cannot access unix domain socket
      # created by privileged CSI driver container.
      privileged: true

  - name: csi-driver-registrar
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /csi
      name: socket-dir
    - mountPath: /registration
      mountPropagation: Bidirectional
      name: registration-dir
    - mountPath: /var/lib/kubelet/pods
      mountPropagation: "Bidirectional"
      name: mountpoint-dir
    image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.5.0
    args:
      - "--v=5"
      - "--csi-address=/csi/csi.sock"
      - "--kubelet-registration-path=/var/lib/kubelet/plugins_registry/springfield.csi.redhat.com-reg.sock"
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 15

  volumes:
    - emptyDir: {}
      name: socket-dir
    - hostPath:
        path: /host_dbus
        type: Directory
      name: dbus-socket
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - hostPath:
        # 'path' is where PV data is persisted on host.
        # using /tmp is also possible while the PVs will not available after plugin container recreation or host reboot
        path: /var/lib/csi-springfield-data/
        type: DirectoryOrCreate
      name: springfield-data-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: mountpoint-dir